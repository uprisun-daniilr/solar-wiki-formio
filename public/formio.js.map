{"version":3,"file":"formio.js","mappings":"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","sources":["webpack://solar-wiki-formio/./src/components/google-map.provider.js","webpack://solar-wiki-formio/./src/components/helper.js","webpack://solar-wiki-formio/./src/components/utility-select.component.js","webpack://solar-wiki-formio/./src/index.js"],"sourcesContent":["export class GoogleMapProvider extends Formio.Providers.providers.address\n  .google {\n  constructor(...props) {\n    super(...props);\n  }\n  static get name() {\n    return \"google\";\n  }\n\n  static get displayName() {\n    return \"Google Maps\";\n  }\n\n  updateMap({ lat, lng }) {\n    this.marker.setPosition({\n      lat,\n      lng,\n    });\n    this.map.setCenter(this.marker.position);\n  }\n\n  reverseGeocode(lat, lng) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode(\n      {\n        location: {\n          lat,\n          lng,\n        },\n      },\n      (results, status) => {\n        const address = results[0];\n\n        if (status === \"OK\" && address) {\n          let isAddressAllowed = true;\n          const autocompleteOptions = this.options.params.autocompleteOptions;\n\n          if (\n            autocompleteOptions.componentRestrictions &&\n            autocompleteOptions.componentRestrictions.country\n          ) {\n            const country = address.address_components.find(\n              (item) => item.types.indexOf(\"country\") !== -1\n            );\n            if (!country) {\n              isAddressAllowed = false;\n            } else if (\n              country.short_name.toLowerCase() !==\n              autocompleteOptions.componentRestrictions.country.toLowerCase()\n            ) {\n              isAddressAllowed = false;\n            }\n          }\n\n          if (!isAddressAllowed) {\n            return;\n          }\n\n          const input = this.element;\n          if (input) {\n            this.onSelectAddress(\n              this.formatAddress(address, this.autocomplete),\n              this.element\n            );\n            this.updateMap({\n              lat,\n              lng,\n            });\n          }\n        } else {\n          console.error(\"Geocoder failed due to:\", status);\n        }\n      }\n    );\n  }\n\n  initMap(mapElement, defaultZoom, defaultCenter) {\n    this.map = new google.maps.Map(mapElement, {\n      zoom: defaultZoom,\n      center: this.currentValue || defaultCenter,\n    });\n\n    this.marker = new google.maps.Marker({\n      position: this.currentValue || defaultCenter,\n      map: this.map,\n      draggable: true,\n    });\n\n    if (!this.element.disabled) {\n      google.maps.event.addListener(this.marker, \"dragend\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n\n      google.maps.event.addListener(this.map, \"click\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n    }\n\n    if (this.element.value) {\n      var request = {\n        query: this.element.value,\n        fields: [\"name\", \"geometry\"],\n      };\n\n      var service = new google.maps.places.PlacesService(this.map);\n\n      service.findPlaceFromQuery(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          this.map.setCenter(results[0].geometry.location);\n          this.marker.setPosition(results[0].geometry.location);\n        }\n      });\n    }\n  }\n\n  attachAutocomplete(elem, index, onSelectAddress) {\n    this.onSelectAddress = onSelectAddress;\n    this.element = elem;\n\n    const { defaultCenterLat, defaultCenterLng, isMapEnabled, defaultZoom } =\n      this.options.params;\n\n    const mapElement = document.createElement(\"div\");\n    mapElement.style.height = \"400px\";\n    mapElement.style[\"margin-top\"] = \"16px\";\n    mapElement.style.width = \"100%\";\n    mapElement.style.background = \"#eee\";\n\n    if (isMapEnabled) {\n      elem.parentNode.insertBefore(mapElement, elem.nextSibling);\n    }\n\n    Formio.libraryReady(this.getLibraryName()).then(() => {\n      const autocomplete = new google.maps.places.Autocomplete(\n        elem,\n        this.autocompleteOptions\n      );\n\n      autocomplete.addListener(\"place_changed\", () => {\n        const place = this.filterPlace(autocomplete.getPlace());\n\n        const location = place.geometry\n          ? {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            }\n          : null;\n\n        if (isMapEnabled) {\n          this.updateMap(location);\n        }\n\n        // Call the onSelectAddress function with the structured address\n        onSelectAddress(this.formatAddress(place, autocomplete), elem, index);\n      });\n\n      if (isMapEnabled) {\n        this.initMap(mapElement, defaultZoom, {\n          lat: defaultCenterLat,\n          lng: defaultCenterLng,\n        });\n      }\n    });\n  }\n\n  formatAddress = (place, autocomplete) => {\n    place.formattedPlace = _.get(\n      autocomplete,\n      \"gm_accessors_.place.se.formattedPrediction\",\n      place[this.alternativeDisplayValueProperty]\n    );\n\n    // Initialize the address components\n    let country = \"\";\n    let zip = \"\";\n    let state = \"\";\n    let city = \"\";\n    let street = \"\";\n    let streetNumber = \"\";\n\n    const location = place.geometry\n      ? {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        }\n      : null;\n\n    // Extract address components\n    if (place.address_components) {\n      place.address_components.forEach((component) => {\n        const types = component.types;\n        if (types.includes(\"country\")) {\n          country = component.long_name;\n        }\n\n        if (types.includes(\"postal_code\")) {\n          zip = component.long_name;\n        }\n\n        if (types.includes(\"administrative_area_level_1\")) {\n          state = component.long_name;\n        }\n\n        if (types.includes(\"locality\")) {\n          city = component.long_name;\n        }\n\n        if (types.includes(\"route\")) {\n          street = component.long_name;\n        }\n\n        if (types.includes(\"street_number\")) {\n          streetNumber = component.long_name;\n        }\n      });\n    }\n\n    // Construct the structured address object\n    return {\n      zip,\n      city,\n      state,\n      street,\n      country,\n      location,\n      streetNumber,\n      formattedPlace: place.formattedPlace,\n    };\n  };\n  static initialize() {\n    const addressEditForm = Formio.Components.components.address.editForm;\n\n    Formio.Components.components.address.editForm = (...args) => {\n      const editForm = addressEditForm(...args);\n\n      const tabs = editForm.components.find(({ type }) => type === \"tabs\");\n\n      const provider = tabs.components.find(({ key }) => key === \"provider\");\n\n      provider.components.push({\n        type: \"checkbox\",\n        input: true,\n        inputType: \"checkbox\",\n        key: \"providerOptions.params.isMapEnabled\",\n        label: \"Show Map\",\n        defaultValue: false,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultZoom\",\n        label: \"Zoom\",\n        defaultValue: 8,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLat\",\n        label: \"Default Center Latitude\",\n        defaultValue: 40.712776,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLng\",\n        label: \"Default Center Longitude\",\n        defaultValue: -74.0059728,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      return editForm;\n    };\n  }\n}\n","export const getRoot = (component) => {\n  if (component.root && component.root !== component) {\n    return getRoot(component.root);\n  } else {\n    return component;\n  }\n};\n","import { getRoot } from \"./helper\";\n\nexport class UtilityProviderSelectComponent extends Formio.Components.components\n  .select {\n  static schema(...extend) {\n    return Formio.Components.components.select.schema(\n      {\n        type: \"utilityproviderselect\",\n        label: \"Utility provider select\",\n        key: \"utilityproviderselect\",\n        dataSrc: \"url\",\n        valueProperty: \"\",\n        selectValues: \"outputs.utility_info\",\n        template: \"<span>{{ item.utility_name }}</span>\",\n        data: {\n          url: \"\",\n        },\n      },\n      ...extend\n    );\n  }\n\n  static get builderInfo() {\n    return {\n      title: \"Utility provider select\",\n      group: \"advanced\",\n      icon: \"fa fa-list\",\n      weight: 70,\n      schema: UtilityProviderSelectComponent.schema(),\n    };\n  }\n\n  loadItems(url, search, headers, options, method) {\n    const form = getRoot(this);\n\n    const address = form.getComponent(\"address\");\n\n    if (!address) return [];\n\n    const addressValue = address.getValue();\n\n    const location =\n      addressValue?.data?.address?.geometry?.location ||\n      addressValue?.geometry?.location;\n\n    if (!location) {\n      return;\n    }\n\n    let { lat, lng } = location;\n\n    lat = typeof lat === \"function\" ? lat() : lat;\n    lng = typeof lng === \"function\" ? lng() : lng;\n\n    const api_key = this.component.api_key;\n    const radius = this.component.radius || 0;\n\n    if (lat && lng) {\n      url = `https://developer.nrel.gov/api/utility_rates/v3.json?api_key=${api_key}&lat=${lat}&lon=${lng}&radius=${radius}`;\n    }\n\n    return super.loadItems(url, search, headers, options, method);\n  }\n\n  static editForm(...extend) {\n    return Formio.Components.components.select.editForm(\n      [\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"API Key\",\n              key: \"api_key\",\n              weight: 20,\n              placeholder: \"Enter your API key\",\n              tooltip: \"The API key for the data source\",\n            },\n          ],\n        },\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"Radius\",\n              key: \"radius\",\n              weight: 20,\n              placeholder: \"Enter search radius from 0 to 200\",\n            },\n          ],\n        },\n      ],\n      ...extend\n    );\n  }\n}\n","import { GoogleMapProvider } from \"./components/google-map.provider\";\nimport { UtilityProviderSelectComponent } from \"./components/utility-select.component\";\n\n(() => {\n  console.info(\"Custom components was loaded.\");\n  GoogleMapProvider.initialize();\n\n  Formio.Providers.addProvider(\"address\", \"google\", GoogleMapProvider);\n\n  Formio.Components.addComponent(\n    \"utilityproviderselect\",\n    UtilityProviderSelectComponent\n  );\n})();\n"],"names":["GoogleMapProvider","_Formio$Providers$pro","_this","_classCallCheck","_len","arguments","length","props","Array","_key","_callSuper","concat","place","autocomplete","formattedPlace","_","get","alternativeDisplayValueProperty","country","zip","state","city","street","streetNumber","location","geometry","lat","lng","address_components","forEach","component","types","includes","long_name","_inherits","Formio","Providers","providers","address","google","key","value","addressEditForm","Components","components","editForm","apply","provider","find","_ref2","type","_ref3","push","input","inputType","label","defaultValue","conditional","json","var","_ref","this","marker","setPosition","map","setCenter","position","_this2","maps","Geocoder","geocode","results","status","isAddressAllowed","autocompleteOptions","options","params","componentRestrictions","item","indexOf","short_name","toLowerCase","element","onSelectAddress","formatAddress","updateMap","console","error","mapElement","defaultZoom","defaultCenter","_this3","Map","zoom","center","currentValue","Marker","draggable","disabled","event","addListener","latLng","reverseGeocode","request","query","fields","places","PlacesService","findPlaceFromQuery","PlacesServiceStatus","OK","elem","index","_this4","_this$options$params","defaultCenterLat","defaultCenterLng","isMapEnabled","document","createElement","style","height","width","background","parentNode","insertBefore","nextSibling","libraryReady","getLibraryName","then","Autocomplete","filterPlace","getPlace","initMap","getRoot","root","UtilityProviderSelectComponent","_Formio$Components$co","select","_Formio$Components$co2","extend","schema","dataSrc","valueProperty","selectValues","template","data","url","title","group","icon","weight","_Formio$Components$co3","_len2","_key2","placeholder","tooltip","search","headers","method","_addressValue$data","_addressValue$geometr","getComponent","addressValue","getValue","api_key","radius","_get","_getPrototypeOf","prototype","call","info","initialize","addProvider","addComponent"],"sourceRoot":""}