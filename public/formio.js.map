{"version":3,"file":"formio.js","mappings":"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","sources":["webpack://solar-wiki-formio/./src/components/helper.js","webpack://solar-wiki-formio/./src/components/google-map.provider.js","webpack://solar-wiki-formio/./src/components/utility-select.component.js","webpack://solar-wiki-formio/./src/index.js"],"sourcesContent":["export const getRoot = (component) => {\n  if (component.root && component.root !== component) {\n    return getRoot(component.root);\n  } else {\n    return component;\n  }\n};\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is `undefined`, the `defaultValue` is returned in its place.\n *\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n */\nexport function deepGet(object, path, defaultValue) {\n  const castPath = (value) => {\n    if (Array.isArray(value)) {\n      return value;\n    }\n    return value.split(\".\").filter(Boolean);\n  };\n\n  const toKey = (value) => {\n    if (typeof value === \"symbol\" || typeof value === \"number\") {\n      return value;\n    }\n    return String(value);\n  };\n\n  const isObject = (value) => {\n    return value !== null && typeof value === \"object\";\n  };\n\n  const baseGet = (object, path) => {\n    path = castPath(path);\n    let index = 0;\n    const length = path.length;\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n    return index && index === length ? object : undefined;\n  };\n\n  const result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n","import { deepGet } from \"./helper\";\n\nexport class GoogleMapProvider extends Formio.Providers.providers.address\n  .google {\n  constructor(...props) {\n    super(...props);\n  }\n  static get name() {\n    return \"google\";\n  }\n\n  static get displayName() {\n    return \"Google Maps\";\n  }\n\n  updateMap({ lat, lng }) {\n    this.marker.setPosition({\n      lat,\n      lng,\n    });\n    this.map.setCenter(this.marker.position);\n  }\n\n  reverseGeocode(lat, lng) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode(\n      {\n        location: {\n          lat,\n          lng,\n        },\n      },\n      (results, status) => {\n        const address = results[0];\n\n        if (status === \"OK\" && address) {\n          let isAddressAllowed = true;\n          const autocompleteOptions = this.options.params.autocompleteOptions;\n\n          if (\n            autocompleteOptions.componentRestrictions &&\n            autocompleteOptions.componentRestrictions.country\n          ) {\n            const country = address.address_components.find(\n              (item) => item.types.indexOf(\"country\") !== -1\n            );\n            if (!country) {\n              isAddressAllowed = false;\n            } else if (\n              country.short_name.toLowerCase() !==\n              autocompleteOptions.componentRestrictions.country.toLowerCase()\n            ) {\n              isAddressAllowed = false;\n            }\n          }\n\n          if (!isAddressAllowed) {\n            return;\n          }\n\n          const input = this.element;\n          if (input) {\n            address.formattedPlace = deepGet(\n              this.autocomplete,\n              \"gm_accessors_.place.se.formattedPrediction\",\n              address[this.alternativeDisplayValueProperty]\n            );\n\n            this.onSelectAddress(\n              this.formatAddress(address, this.autocomplete),\n              this.element\n            );\n            this.updateMap({\n              lat,\n              lng,\n            });\n          }\n        } else {\n          console.error(\"Geocoder failed due to:\", status);\n        }\n      }\n    );\n  }\n\n  initMap(mapElement, defaultZoom, defaultCenter) {\n    this.map = new google.maps.Map(mapElement, {\n      zoom: defaultZoom,\n      center: this.currentValue || defaultCenter,\n    });\n\n    this.marker = new google.maps.Marker({\n      position: this.currentValue || defaultCenter,\n      map: this.map,\n      draggable: true,\n    });\n\n    if (!this.element.disabled) {\n      google.maps.event.addListener(this.marker, \"dragend\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n\n      google.maps.event.addListener(this.map, \"click\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n    }\n\n    if (this.element.value) {\n      var request = {\n        query: this.element.value,\n        fields: [\"name\", \"geometry\"],\n      };\n\n      var service = new google.maps.places.PlacesService(this.map);\n\n      service.findPlaceFromQuery(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          this.map.setCenter(results[0].geometry.location);\n          this.marker.setPosition(results[0].geometry.location);\n        }\n      });\n    }\n  }\n\n  attachAutocomplete(elem, index, onSelectAddress) {\n    this.onSelectAddress = onSelectAddress;\n    this.element = elem;\n\n    const { defaultCenterLat, defaultCenterLng, isMapEnabled, defaultZoom } =\n      this.options.params;\n\n    const mapElement = document.createElement(\"div\");\n    mapElement.style.height = \"400px\";\n    mapElement.style[\"margin-top\"] = \"16px\";\n    mapElement.style.width = \"100%\";\n    mapElement.style.background = \"#eee\";\n\n    if (isMapEnabled) {\n      elem.parentNode.insertBefore(mapElement, elem.nextSibling);\n    }\n\n    Formio.libraryReady(this.getLibraryName()).then(() => {\n      const autocomplete = new google.maps.places.Autocomplete(\n        elem,\n        this.autocompleteOptions\n      );\n\n      autocomplete.addListener(\"place_changed\", () => {\n        const place = this.filterPlace(autocomplete.getPlace());\n\n        const location = place.geometry\n          ? {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            }\n          : null;\n\n        if (isMapEnabled) {\n          this.updateMap(location);\n        }\n\n        place.formattedPlace = deepGet(\n          autocomplete,\n          \"gm_accessors_.place.se.formattedPrediction\",\n          place[this.alternativeDisplayValueProperty]\n        );\n\n        // Call the onSelectAddress function with the structured address\n        onSelectAddress(this.formatAddress(place, autocomplete), elem, index);\n      });\n\n      if (isMapEnabled) {\n        this.initMap(mapElement, defaultZoom, {\n          lat: defaultCenterLat,\n          lng: defaultCenterLng,\n        });\n      }\n    });\n  }\n\n  formatAddress = (place, autocomplete) => {\n    // Initialize the address components\n    let country = \"\";\n    let zip = \"\";\n    let state = \"\";\n    let city = \"\";\n    let street = \"\";\n    let streetNumber = \"\";\n\n    const location = place.geometry\n      ? {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        }\n      : null;\n\n    // Extract address components\n    if (place.address_components) {\n      place.address_components.forEach((component) => {\n        const types = component.types;\n        if (types.includes(\"country\")) {\n          country = component.long_name;\n        }\n\n        if (types.includes(\"postal_code\")) {\n          zip = component.long_name;\n        }\n\n        if (types.includes(\"administrative_area_level_1\")) {\n          state = component.long_name;\n        }\n\n        if (types.includes(\"locality\")) {\n          city = component.long_name;\n        }\n\n        if (types.includes(\"route\")) {\n          street = component.long_name;\n        }\n\n        if (types.includes(\"street_number\")) {\n          streetNumber = component.long_name;\n        }\n      });\n    }\n\n    // Construct the structured address object\n    return {\n      ...address,\n      zip,\n      city,\n      state,\n      street,\n      country,\n      location,\n      streetNumber,\n      formattedPlace: place.formattedPlace,\n    };\n  };\n  static initialize() {\n    const addressEditForm = Formio.Components.components.address.editForm;\n\n    Formio.Components.components.address.editForm = (...args) => {\n      const editForm = addressEditForm(...args);\n\n      const tabs = editForm.components.find(({ type }) => type === \"tabs\");\n\n      const provider = tabs.components.find(({ key }) => key === \"provider\");\n\n      provider.components.push({\n        type: \"checkbox\",\n        input: true,\n        inputType: \"checkbox\",\n        key: \"providerOptions.params.isMapEnabled\",\n        label: \"Show Map\",\n        defaultValue: false,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultZoom\",\n        label: \"Zoom\",\n        defaultValue: 8,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLat\",\n        label: \"Default Center Latitude\",\n        defaultValue: 40.712776,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLng\",\n        label: \"Default Center Longitude\",\n        defaultValue: -74.0059728,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      return editForm;\n    };\n  }\n}\n","import { getRoot } from \"./helper\";\n\nexport class UtilityProviderSelectComponent extends Formio.Components.components\n  .select {\n  static schema(...extend) {\n    return Formio.Components.components.select.schema(\n      {\n        type: \"utilityproviderselect\",\n        label: \"Utility provider select\",\n        key: \"utilityproviderselect\",\n        dataSrc: \"url\",\n        valueProperty: \"\",\n        selectValues: \"outputs.utility_info\",\n        template: \"<span>{{ item.utility_name }}</span>\",\n        data: {\n          url: \"\",\n        },\n      },\n      ...extend\n    );\n  }\n\n  static get builderInfo() {\n    return {\n      title: \"Utility provider select\",\n      group: \"advanced\",\n      icon: \"fa fa-list\",\n      weight: 70,\n      schema: UtilityProviderSelectComponent.schema(),\n    };\n  }\n\n  loadItems(url, search, headers, options, method) {\n    const form = getRoot(this);\n\n    const address = form.getComponent(\"address\");\n\n    if (!address) return [];\n\n    const addressValue = address.getValue();\n\n    const location =\n      addressValue?.data?.address?.geometry?.location ||\n      addressValue?.geometry?.location;\n\n    if (!location) {\n      return;\n    }\n\n    let { lat, lng } = location;\n\n    lat = typeof lat === \"function\" ? lat() : lat;\n    lng = typeof lng === \"function\" ? lng() : lng;\n\n    const api_key = this.component.api_key;\n    const radius = this.component.radius || 0;\n\n    if (lat && lng) {\n      url = `https://developer.nrel.gov/api/utility_rates/v3.json?api_key=${api_key}&lat=${lat}&lon=${lng}&radius=${radius}`;\n    }\n\n    return super.loadItems(url, search, headers, options, method);\n  }\n\n  static editForm(...extend) {\n    return Formio.Components.components.select.editForm(\n      [\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"API Key\",\n              key: \"api_key\",\n              weight: 20,\n              placeholder: \"Enter your API key\",\n              tooltip: \"The API key for the data source\",\n            },\n          ],\n        },\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"Radius\",\n              key: \"radius\",\n              weight: 20,\n              placeholder: \"Enter search radius from 0 to 200\",\n            },\n          ],\n        },\n      ],\n      ...extend\n    );\n  }\n}\n","import { GoogleMapProvider } from \"./components/google-map.provider\";\nimport { UtilityProviderSelectComponent } from \"./components/utility-select.component\";\n\n(() => {\n  console.info(\"Custom components was loaded.\");\n  GoogleMapProvider.initialize();\n\n  Formio.Providers.addProvider(\"address\", \"google\", GoogleMapProvider);\n\n  Formio.Components.addComponent(\n    \"utilityproviderselect\",\n    UtilityProviderSelectComponent\n  );\n})();\n"],"names":["getRoot","component","root","deepGet","object","path","defaultValue","toKey","value","_typeof","String","result","undefined","index","length","Array","isArray","split","filter","Boolean","baseGet","GoogleMapProvider","_Formio$Providers$pro","_this","_classCallCheck","_len","arguments","props","_key","_defineProperty","_callSuper","concat","place","autocomplete","country","zip","state","city","street","streetNumber","location","geometry","lat","lng","address_components","forEach","types","includes","long_name","_objectSpread","address","formattedPlace","_inherits","Formio","Providers","providers","google","key","get","addressEditForm","Components","components","editForm","apply","provider","find","_ref2","type","_ref3","push","input","inputType","label","conditional","json","var","_ref","this","marker","setPosition","map","setCenter","position","_this2","maps","Geocoder","geocode","results","status","isAddressAllowed","autocompleteOptions","options","params","componentRestrictions","item","indexOf","short_name","toLowerCase","element","alternativeDisplayValueProperty","onSelectAddress","formatAddress","updateMap","console","error","mapElement","defaultZoom","defaultCenter","_this3","Map","zoom","center","currentValue","Marker","draggable","disabled","event","addListener","latLng","reverseGeocode","request","query","fields","places","PlacesService","findPlaceFromQuery","PlacesServiceStatus","OK","elem","_this4","_this$options$params","defaultCenterLat","defaultCenterLng","isMapEnabled","document","createElement","style","height","width","background","parentNode","insertBefore","nextSibling","libraryReady","getLibraryName","then","Autocomplete","filterPlace","getPlace","initMap","UtilityProviderSelectComponent","_Formio$Components$co","select","_Formio$Components$co2","extend","schema","dataSrc","valueProperty","selectValues","template","data","url","title","group","icon","weight","_Formio$Components$co3","_len2","_key2","placeholder","tooltip","search","headers","method","_addressValue$data","_addressValue$geometr","getComponent","addressValue","getValue","api_key","radius","_get","_getPrototypeOf","prototype","call","info","initialize","addProvider","addComponent"],"sourceRoot":""}