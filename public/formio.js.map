{"version":3,"file":"formio.js","mappings":"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","sources":["webpack://solar-wiki-formio/./src/components/helper.js","webpack://solar-wiki-formio/./src/components/google-map.provider.js","webpack://solar-wiki-formio/./src/components/utility-select.component.js","webpack://solar-wiki-formio/./src/index.js"],"sourcesContent":["export const getRoot = (component) => {\n  if (component.root && component.root !== component) {\n    return getRoot(component.root);\n  } else {\n    return component;\n  }\n};\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is `undefined`, the `defaultValue` is returned in its place.\n *\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n */\nexport function deepGet(object, path, defaultValue) {\n  const castPath = (value) => {\n    if (Array.isArray(value)) {\n      return value;\n    }\n    return value.split(\".\").filter(Boolean);\n  };\n\n  const toKey = (value) => {\n    if (typeof value === \"symbol\" || typeof value === \"number\") {\n      return value;\n    }\n    return String(value);\n  };\n\n  const isObject = (value) => {\n    return value !== null && typeof value === \"object\";\n  };\n\n  const baseGet = (object, path) => {\n    path = castPath(path);\n    let index = 0;\n    const length = path.length;\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n    return index && index === length ? object : undefined;\n  };\n\n  const result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n","import { deepGet } from \"./helper\";\n\nexport class GoogleMapProvider extends Formio.Providers.providers.address\n  .google {\n  constructor(...props) {\n    super(...props);\n  }\n  static get name() {\n    return \"google\";\n  }\n\n  static get displayName() {\n    return \"Google Maps\";\n  }\n\n  updateMap({ lat, lng }) {\n    this.marker.setPosition({\n      lat,\n      lng,\n    });\n    this.map.setCenter(this.marker.position);\n    this.fetchSolarData(lat, lng);\n  }\n\n  reverseGeocode(lat, lng) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode(\n      {\n        location: {\n          lat,\n          lng,\n        },\n      },\n      (results, status) => {\n        const address = results[0];\n\n        if (status === \"OK\" && address) {\n          let isAddressAllowed = true;\n          const autocompleteOptions = this.options.params.autocompleteOptions;\n\n          if (\n            autocompleteOptions.componentRestrictions &&\n            autocompleteOptions.componentRestrictions.country\n          ) {\n            const country = address.address_components.find(\n              (item) => item.types.indexOf(\"country\") !== -1\n            );\n            if (!country) {\n              isAddressAllowed = false;\n            } else if (\n              country.short_name.toLowerCase() !==\n              autocompleteOptions.componentRestrictions.country.toLowerCase()\n            ) {\n              isAddressAllowed = false;\n            }\n          }\n\n          if (!isAddressAllowed) {\n            return;\n          }\n\n          const input = this.element;\n          if (input) {\n            address.formattedPlace = deepGet(\n              this.autocomplete,\n              \"gm_accessors_.place.se.formattedPrediction\",\n              address[this.alternativeDisplayValueProperty]\n            );\n\n            this.onSelectAddress(this.formatAddress(address), this.element);\n            this.updateMap({\n              lat,\n              lng,\n            });\n          }\n        } else {\n          console.error(\"Geocoder failed due to:\", status);\n        }\n      }\n    );\n  }\n\n  initMap(mapElement, defaultZoom, defaultCenter) {\n    this.map = new google.maps.Map(mapElement, {\n      zoom: defaultZoom,\n      center: this.currentValue || defaultCenter,\n    });\n\n    this.marker = new google.maps.Marker({\n      position: this.currentValue || defaultCenter,\n      map: this.map,\n      draggable: true,\n    });\n\n    if (!this.element.disabled) {\n      google.maps.event.addListener(this.marker, \"dragend\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n\n      google.maps.event.addListener(this.map, \"click\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n    }\n\n    if (this.element.value) {\n      var request = {\n        query: this.element.value,\n        fields: [\"name\", \"geometry\"],\n      };\n\n      var service = new google.maps.places.PlacesService(this.map);\n\n      service.findPlaceFromQuery(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          const location = results[0].geometry.location;\n          this.map.setCenter(location);\n          this.fetchSolarData(location.lat, location.lng);\n          this.marker.setPosition(location);\n        }\n      });\n    }\n  }\n\n  attachAutocomplete(elem, index, onSelectAddress) {\n    this.onSelectAddress = onSelectAddress;\n    this.element = elem;\n\n    const { defaultCenterLat, defaultCenterLng, isMapEnabled, defaultZoom } =\n      this.options.params;\n\n    const mapElement = document.createElement(\"div\");\n    mapElement.className = \"google-map-address-container\";\n    mapElement.style.height = \"400px\";\n    mapElement.style[\"margin-top\"] = \"16px\";\n    mapElement.style.width = \"100%\";\n    mapElement.style.background = \"#eee\";\n\n    if (isMapEnabled) {\n      elem.parentNode.parentNode.appendChild(mapElement);\n    }\n\n    Formio.libraryReady(this.getLibraryName()).then(() => {\n      const autocomplete = new google.maps.places.Autocomplete(\n        elem,\n        this.autocompleteOptions\n      );\n\n      autocomplete.addListener(\"place_changed\", () => {\n        const place = this.filterPlace(autocomplete.getPlace());\n\n        const location = place.geometry\n          ? {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            }\n          : null;\n\n        if (isMapEnabled) {\n          this.updateMap(location);\n        }\n\n        place.formattedPlace = deepGet(\n          autocomplete,\n          \"gm_accessors_.place.se.formattedPrediction\",\n          place[this.alternativeDisplayValueProperty]\n        );\n\n        // Call the onSelectAddress function with the structured address\n        onSelectAddress(this.formatAddress(place), elem, index);\n      });\n\n      if (isMapEnabled) {\n        this.initMap(mapElement, defaultZoom, {\n          lat: defaultCenterLat,\n          lng: defaultCenterLng,\n        });\n      }\n    });\n  }\n\n  fetchSolarData() {\n    return;\n    if (!this.marker) return;\n\n    const apiKey = this.options.params.key;\n    const lat = this.marker.position.lat();\n    const lng = this.marker.position.lng();\n    const url = `https://solar.googleapis.com/v1/buildingInsights:findClosest?location=${lat},${lng}&radius=3000&key=${apiKey}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        this.overlaySolarData(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching solar data:\", error);\n      });\n  }\n\n  overlaySolarData = function (data) {\n    const solarLayer = new google.maps.Data();\n    solarLayer.addGeoJson(data);\n    solarLayer.setStyle({\n      fillColor: \"orange\",\n      strokeWeight: 1,\n    });\n    solarLayer.setMap(this.map);\n  };\n\n  formatAddress = (place) => {\n    // Initialize the address components\n    let country = \"\";\n    let zip = \"\";\n    let state = \"\";\n    let city = \"\";\n    let street = \"\";\n    let streetNumber = \"\";\n\n    const location = place.geometry\n      ? {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        }\n      : null;\n\n    // Extract address components\n    if (place.address_components) {\n      place.address_components.forEach((component) => {\n        const types = component.types;\n        if (types.includes(\"country\")) {\n          country = component.long_name;\n        }\n\n        if (types.includes(\"postal_code\")) {\n          zip = component.long_name;\n        }\n\n        if (types.includes(\"administrative_area_level_1\")) {\n          state = component.long_name;\n        }\n\n        if (types.includes(\"locality\")) {\n          city = component.long_name;\n        }\n\n        if (types.includes(\"route\")) {\n          street = component.long_name;\n        }\n\n        if (types.includes(\"street_number\")) {\n          streetNumber = component.long_name;\n        }\n      });\n    }\n\n    // Construct the structured address object\n    return {\n      ...place,\n      zip,\n      city,\n      state,\n      street,\n      country,\n      location,\n      streetNumber,\n      formattedPlace: place.formattedPlace,\n    };\n  };\n  static initialize() {\n    const addressEditForm = Formio.Components.components.address.editForm;\n\n    Formio.Components.components.address.editForm = (...args) => {\n      const editForm = addressEditForm(...args);\n\n      const tabs = editForm.components.find(({ type }) => type === \"tabs\");\n\n      const provider = tabs.components.find(({ key }) => key === \"provider\");\n\n      provider.components.push({\n        type: \"checkbox\",\n        input: true,\n        inputType: \"checkbox\",\n        key: \"providerOptions.params.isMapEnabled\",\n        label: \"Show Map\",\n        defaultValue: false,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultZoom\",\n        label: \"Zoom\",\n        defaultValue: 8,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLat\",\n        label: \"Default Center Latitude\",\n        defaultValue: 40.712776,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLng\",\n        label: \"Default Center Longitude\",\n        defaultValue: -74.0059728,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      return editForm;\n    };\n  }\n}\n","import { getRoot } from \"./helper\";\n\nexport class UtilityProviderSelectComponent extends Formio.Components.components\n  .select {\n  static schema(...extend) {\n    return Formio.Components.components.select.schema(\n      {\n        type: \"utilityproviderselect\",\n        label: \"Utility provider select\",\n        key: \"utilityproviderselect\",\n        dataSrc: \"url\",\n        valueProperty: \"\",\n        selectValues: \"outputs.utility_info\",\n        template: \"<span>{{ item.utility_name }}</span>\",\n        data: {\n          url: \"\",\n        },\n      },\n      ...extend\n    );\n  }\n\n  static get builderInfo() {\n    return {\n      title: \"Utility provider select\",\n      group: \"advanced\",\n      icon: \"fa fa-list\",\n      weight: 70,\n      schema: UtilityProviderSelectComponent.schema(),\n    };\n  }\n\n  loadItems(url, search, headers, options, method) {\n    const form = getRoot(this);\n\n    const address = form.getComponent(\"address\");\n\n    if (!address) return [];\n\n    const addressValue = address.getValue();\n\n    const location =\n      addressValue?.data?.address?.geometry?.location ||\n      addressValue?.geometry?.location;\n\n    if (!location) {\n      return;\n    }\n\n    let { lat, lng } = location;\n\n    lat = typeof lat === \"function\" ? lat() : lat;\n    lng = typeof lng === \"function\" ? lng() : lng;\n\n    const api_key = this.component.api_key;\n    const radius = this.component.radius || 0;\n\n    if (lat && lng) {\n      url = `https://developer.nrel.gov/api/utility_rates/v3.json?api_key=${api_key}&lat=${lat}&lon=${lng}&radius=${radius}`;\n    }\n\n    return super.loadItems(url, search, headers, options, method);\n    // .then((items) => {\n    //   console.log({ items });\n    //   items.push({ utility_name: \"Other\", id: \"other\" });\n\n    //   return items;\n    // });\n  }\n\n  onSetItems(self, items) {\n    console.log(\"onSetItems\");\n    return items;\n  }\n\n  static editForm(...extend) {\n    return Formio.Components.components.select.editForm(\n      [\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"API Key\",\n              key: \"api_key\",\n              weight: 20,\n              placeholder: \"Enter your API key\",\n              tooltip: \"The API key for the data source\",\n            },\n          ],\n        },\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"Radius\",\n              key: \"radius\",\n              weight: 20,\n              placeholder: \"Enter search radius from 0 to 200\",\n            },\n          ],\n        },\n      ],\n      ...extend\n    );\n  }\n}\n","import { GoogleMapProvider } from \"./components/google-map.provider\";\nimport { UtilityProviderSelectComponent } from \"./components/utility-select.component\";\n\n(() => {\n  console.info(\"Custom components was loaded.\");\n  GoogleMapProvider.initialize();\n\n  Formio.Providers.addProvider(\"address\", \"google\", GoogleMapProvider);\n\n  Formio.Components.addComponent(\n    \"utilityproviderselect\",\n    UtilityProviderSelectComponent\n  );\n})();\n"],"names":["getRoot","component","root","deepGet","object","path","defaultValue","toKey","value","_typeof","String","result","undefined","index","length","Array","isArray","split","filter","Boolean","baseGet","GoogleMapProvider","_Formio$Providers$pro","_this","_classCallCheck","_len","arguments","props","_key","_defineProperty","_callSuper","concat","data","solarLayer","google","maps","Data","addGeoJson","setStyle","fillColor","strokeWeight","setMap","this","map","place","country","zip","state","city","street","streetNumber","location","geometry","lat","lng","address_components","forEach","types","includes","long_name","_objectSpread","formattedPlace","_inherits","Formio","Providers","providers","address","key","get","addressEditForm","Components","components","editForm","apply","provider","find","_ref2","type","_ref3","push","input","inputType","label","conditional","json","var","_ref","marker","setPosition","setCenter","position","fetchSolarData","_this2","Geocoder","geocode","results","status","isAddressAllowed","autocompleteOptions","options","params","componentRestrictions","item","indexOf","short_name","toLowerCase","element","autocomplete","alternativeDisplayValueProperty","onSelectAddress","formatAddress","updateMap","console","error","mapElement","defaultZoom","defaultCenter","_this3","Map","zoom","center","currentValue","Marker","draggable","disabled","event","addListener","latLng","reverseGeocode","request","query","fields","places","PlacesService","findPlaceFromQuery","PlacesServiceStatus","OK","elem","_this4","_this$options$params","defaultCenterLat","defaultCenterLng","isMapEnabled","document","createElement","className","style","height","width","background","parentNode","appendChild","libraryReady","getLibraryName","then","Autocomplete","filterPlace","getPlace","initMap","UtilityProviderSelectComponent","_Formio$Components$co","select","_Formio$Components$co2","extend","schema","dataSrc","valueProperty","selectValues","template","url","title","group","icon","weight","_Formio$Components$co3","_len2","_key2","placeholder","tooltip","search","headers","method","_addressValue$data","_addressValue$geometr","getComponent","addressValue","getValue","api_key","radius","_get","_getPrototypeOf","prototype","call","self","items","log","info","initialize","addProvider","addComponent"],"sourceRoot":""}