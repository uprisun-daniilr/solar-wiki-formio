{"version":3,"file":"formio.js","mappings":"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","sources":["webpack://solar-wiki-formio/./src/index.js"],"sourcesContent":["(() => {\n  class GoogleMapProvider extends Formio.Providers.providers.address.google {\n      constructor(...props) {\n          super(...props)\n      }\n      static get name() {\n          return 'google';\n      }\n\n      static get displayName() {\n          return 'Google Maps';\n      }\n\n\n      updateMap({\n          lat,\n          lng\n      }) {\n          this.marker.setPosition({\n              lat,\n              lng\n          });\n          this.map.setCenter(this.marker.position);\n      }\n\n      reverseGeocode(lat, lng) {\n          const geocoder = new google.maps.Geocoder();\n          geocoder.geocode({\n              location: {\n                  lat,\n                  lng\n              }\n          }, (results, status) => {\n              const address = results[0];\n\n              if (status === 'OK' && address) {\n                  let isAddressAllowed = true;\n                  const autocompleteOptions = this.options.params.autocompleteOptions;\n\n                  if (autocompleteOptions.componentRestrictions && autocompleteOptions.componentRestrictions.country) {\n                      const country = address.address_components.find(item => item.types.indexOf('country') !== -1);\n                      if (!country) {\n                        isAddressAllowed = false;\n                      } else if (country.short_name.toLowerCase() !== autocompleteOptions.componentRestrictions.country.toLowerCase()) {\n                        isAddressAllowed = false;\n                      }\n                  }\n\n                  if (!isAddressAllowed) {\n                      return;\n                  }\n\n                  const input = this.element;\n                  if (input) {\n                      this.onSelectAddress(address, this.element)\n                      this.updateMap({\n                          lat,\n                          lng\n                      });\n                  }\n              } else {\n                  console.error('Geocoder failed due to:', status);\n              }\n          });\n      }\n\n      initMap(mapElement, defaultZoom, defaultCenter) {\n          this.map = new google.maps.Map(mapElement, {\n              zoom: defaultZoom,\n              center: this.currentValue || defaultCenter\n          });\n\n          this.marker = new google.maps.Marker({\n              position: this.currentValue || defaultCenter,\n              map: this.map,\n              draggable: true\n          });\n\n          if (!this.element.disabled) {\n              google.maps.event.addListener(this.marker, 'dragend', (event) => {\n                  const lat = event.latLng.lat();\n                  const lng = event.latLng.lng();\n                  this.reverseGeocode(lat, lng);\n              });\n\n              google.maps.event.addListener(this.map, 'click', (event) => {\n                  const lat = event.latLng.lat();\n                  const lng = event.latLng.lng();\n                  this.reverseGeocode(lat, lng);\n              });\n          }\n\n          if(this.element.value) {\n             var request = {\n                query: this.element.value,\n                fields: ['name', 'geometry'],\n              };\n            \n              var service = new google.maps.places.PlacesService(this.map);\n            \n              service.findPlaceFromQuery(request, (results, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  this.map.setCenter(results[0].geometry.location);\n                  this.marker.setPosition(results[0].geometry.location);\n                }\n              });\n          }\n      }\n\n      attachAutocomplete(elem, index, onSelectAddress) {\n        this.onSelectAddress = onSelectAddress;\n          this.element = elem;\n\n          const {\n              defaultCenterLat,\n              defaultCenterLng,\n              isMapEnabled,\n              defaultZoom\n          } = this.options.params;\n\n          const mapElement = document.createElement('div');\n          mapElement.style.height = '400px';\n          mapElement.style['margin-top'] = '16px';\n          mapElement.style.width = '100%';\n          mapElement.style.background = '#eee';\n\n          if (isMapEnabled) {\n              elem.parentNode.insertBefore(mapElement, elem.nextSibling);\n          }\n          \n          Formio.libraryReady(this.getLibraryName()).then(() => {\n              const autocomplete = new google.maps.places.Autocomplete(elem, this.autocompleteOptions);\n\n              autocomplete.addListener('place_changed', () => {\n                  const place = this.filterPlace(autocomplete.getPlace());\n\n                  const location = place.geometry ? {\n                      lat: place.geometry.location.lat(),\n                      lng: place.geometry.location.lng()\n                  } : null;\n\n                  if (isMapEnabled) {\n                      this.updateMap(location);\n                  }\n\n                  place.formattedPlace = _.get(autocomplete, 'gm_accessors_.place.se.formattedPrediction', place[this.alternativeDisplayValueProperty]);\n                  onSelectAddress(place, elem, index);\n              });\n\n              if (isMapEnabled) {\n                  this.initMap(mapElement, defaultZoom, {\n                      lat: defaultCenterLat,\n                      lng: defaultCenterLng\n                  })\n              }\n          });\n      }\n  }\n\n  const addressEditForm = Formio.Components.components.address.editForm;\n\n  Formio.Components.components.address.editForm = (...args) => {\n      const editForm = addressEditForm(...args);\n\n      const tabs = editForm.components.find(({\n          type\n      }) => type === 'tabs');\n\n      const provider = tabs.components.find(({\n          key\n      }) => key === 'provider');\n\n      provider.components.push({\n          type: 'checkbox',\n          input: true,\n          inputType: 'checkbox',\n          key: 'providerOptions.params.isMapEnabled',\n          label: 'Show Map',\n          defaultValue: false,\n          conditional: {\n              json: {\n                  '===': [{\n                      var: 'data.provider'\n                  }, 'google']\n              },\n          },\n      });\n\n      provider.components.push({\n          type: 'number',\n          input: true,\n          key: 'providerOptions.params.defaultZoom',\n          label: 'Zoom',\n          defaultValue: 8,\n          conditional: {\n              json: {\n                  '===': [{\n                      var: 'data.provider'\n                  }, 'google']\n              },\n          },\n      });\n\n      provider.components.push({\n          type: 'number',\n          input: true,\n          key: 'providerOptions.params.defaultCenterLat',\n          label: 'Default Center Latitude',\n          defaultValue: 40.712776,\n          conditional: {\n              json: {\n                  '===': [{\n                      var: 'data.provider'\n                  }, 'google']\n              },\n          },\n      });\n\n      provider.components.push({\n          type: 'number',\n          input: true,\n          key: 'providerOptions.params.defaultCenterLng',\n          label: 'Default Center Longitude',\n          defaultValue: -74.00597280,\n          conditional: {\n              json: {\n                  '===': [{\n                      var: 'data.provider'\n                  }, 'google']\n              },\n          },\n      });\n\n      return editForm;\n  };\n\n  Formio.Providers.addProvider('address', 'google', GoogleMapProvider);\n})()\n"],"names":["GoogleMapProvider","addressEditForm","_Formio$Providers$pro","_classCallCheck","_len","arguments","length","props","Array","_key","_callSuper","concat","_inherits","Formio","Providers","providers","address","google","key","get","value","_ref","lat","lng","this","marker","setPosition","map","setCenter","position","_this","maps","Geocoder","geocode","location","results","status","isAddressAllowed","autocompleteOptions","options","params","componentRestrictions","country","address_components","find","item","types","indexOf","short_name","toLowerCase","element","onSelectAddress","updateMap","console","error","mapElement","defaultZoom","defaultCenter","_this2","Map","zoom","center","currentValue","Marker","draggable","disabled","event","addListener","latLng","reverseGeocode","request","query","fields","places","PlacesService","findPlaceFromQuery","PlacesServiceStatus","OK","geometry","elem","index","_this3","_this$options$params","defaultCenterLat","defaultCenterLng","isMapEnabled","document","createElement","style","height","width","background","parentNode","insertBefore","nextSibling","libraryReady","getLibraryName","then","autocomplete","Autocomplete","place","filterPlace","getPlace","formattedPlace","_","alternativeDisplayValueProperty","initMap","Components","components","editForm","apply","provider","_ref2","type","_ref3","push","input","inputType","label","defaultValue","conditional","json","var","addProvider"],"sourceRoot":""}