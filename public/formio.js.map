{"version":3,"file":"formio.js","mappings":"u9CAAO,IAAMA,EAAiB,SAAAC,GAE5B,SAAAD,K,4FAAsBE,CAAA,KAAAF,GAAA,QAAAG,EAAAC,UAAAC,OAAPC,EAAK,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAALF,EAAKE,GAAAJ,UAAAI,GAAA,OAAAC,EAAA,KAAAT,EAAA,GAAAU,OACTJ,GACX,CAAC,O,qRAAAK,CAAAX,EAJoCY,OAAOC,UAAUC,UAAUC,QAC/DC,Q,EAGAhB,E,EAoKA,EAAAiB,IAAA,OAAAC,IAnKD,WACE,MAAO,QACT,GAAC,CAAAD,IAAA,cAAAC,IAED,WACE,MAAO,aACT,GAAC,CAAAD,IAAA,aAAAE,MA8JD,WACE,IAAMC,EAAkBR,OAAOS,WAAWC,WAAWP,QAAQQ,SAE7DX,OAAOS,WAAWC,WAAWP,QAAQQ,SAAW,WAC9C,IAAMA,EAAWH,EAAeI,WAAC,EAADpB,WAI1BqB,EAFOF,EAASD,WAAWI,MAAK,SAAAC,GAAO,MAAgB,SAAhBA,EAAJC,IAA0B,IAE7CN,WAAWI,MAAK,SAAAG,GAAM,MAAe,aAAfA,EAAHZ,GAA4B,IA2ErE,OAzEAQ,EAASH,WAAWQ,KAAK,CACvBF,KAAM,WACNG,OAAO,EACPC,UAAW,WACXf,IAAK,sCACLgB,MAAO,WACPC,cAAc,EACdC,YAAa,CACXC,KAAM,CACJ,MAAO,CACL,CACEC,IAAK,iBAEP,cAMRZ,EAASH,WAAWQ,KAAK,CACvBF,KAAM,SACNG,OAAO,EACPd,IAAK,qCACLgB,MAAO,OACPC,aAAc,EACdC,YAAa,CACXC,KAAM,CACJ,MAAO,CACL,CACEC,IAAK,iBAEP,cAMRZ,EAASH,WAAWQ,KAAK,CACvBF,KAAM,SACNG,OAAO,EACPd,IAAK,0CACLgB,MAAO,0BACPC,aAAc,UACdC,YAAa,CACXC,KAAM,CACJ,MAAO,CACL,CACEC,IAAK,iBAEP,cAMRZ,EAASH,WAAWQ,KAAK,CACvBF,KAAM,SACNG,OAAO,EACPd,IAAK,0CACLgB,MAAO,2BACPC,cAAe,WACfC,YAAa,CACXC,KAAM,CACJ,MAAO,CACL,CACEC,IAAK,iBAEP,cAMDd,CACT,CACF,K,EA1PC,EAAAN,IAAA,YAAAE,MASD,SAAAmB,GAAwB,IAAZC,EAAGD,EAAHC,IAAKC,EAAGF,EAAHE,IACfC,KAAKC,OAAOC,YAAY,CACtBJ,IAAAA,EACAC,IAAAA,IAEFC,KAAKG,IAAIC,UAAUJ,KAAKC,OAAOI,SACjC,GAAC,CAAA7B,IAAA,iBAAAE,MAED,SAAeoB,EAAKC,GAAK,IAAAO,EAAA,MACN,IAAI/B,OAAOgC,KAAKC,UACxBC,QACP,CACEC,SAAU,CACRZ,IAAAA,EACAC,IAAAA,KAGJ,SAACY,EAASC,GACR,IAAMtC,EAAUqC,EAAQ,GAExB,GAAe,OAAXC,GAAmBtC,EAAS,CAC9B,IAAIuC,GAAmB,EACjBC,EAAsBR,EAAKS,QAAQC,OAAOF,oBAEhD,GACEA,EAAoBG,uBACpBH,EAAoBG,sBAAsBC,QAC1C,CACA,IAAMA,EAAU5C,EAAQ6C,mBAAmBlC,MACzC,SAACmC,GAAI,OAAwC,IAAnCA,EAAKC,MAAMC,QAAQ,UAAiB,IAE3CJ,EAGHA,EAAQK,WAAWC,gBACnBV,EAAoBG,sBAAsBC,QAAQM,gBAElDX,GAAmB,GALnBA,GAAmB,CAOvB,CAEA,IAAKA,EACH,OAGYP,EAAKmB,UAEjBnB,EAAKoB,gBAAgBpD,EAASgC,EAAKmB,SACnCnB,EAAKqB,UAAU,CACb7B,IAAAA,EACAC,IAAAA,IAGN,MACE6B,QAAQC,MAAM,0BAA2BjB,EAE7C,GAEJ,GAAC,CAAApC,IAAA,UAAAE,MAED,SAAQoD,EAAYC,EAAaC,GAAe,IAAAC,EAAA,KA0B9C,GAzBAjC,KAAKG,IAAM,IAAI5B,OAAOgC,KAAK2B,IAAIJ,EAAY,CACzCK,KAAMJ,EACNK,OAAQpC,KAAKqC,cAAgBL,IAG/BhC,KAAKC,OAAS,IAAI1B,OAAOgC,KAAK+B,OAAO,CACnCjC,SAAUL,KAAKqC,cAAgBL,EAC/B7B,IAAKH,KAAKG,IACVoC,WAAW,IAGRvC,KAAKyB,QAAQe,WAChBjE,OAAOgC,KAAKkC,MAAMC,YAAY1C,KAAKC,OAAQ,WAAW,SAACwC,GACrD,IAAM3C,EAAM2C,EAAME,OAAO7C,MACnBC,EAAM0C,EAAME,OAAO5C,MACzBkC,EAAKW,eAAe9C,EAAKC,EAC3B,IAEAxB,OAAOgC,KAAKkC,MAAMC,YAAY1C,KAAKG,IAAK,SAAS,SAACsC,GAChD,IAAM3C,EAAM2C,EAAME,OAAO7C,MACnBC,EAAM0C,EAAME,OAAO5C,MACzBkC,EAAKW,eAAe9C,EAAKC,EAC3B,KAGEC,KAAKyB,QAAQ/C,MAAO,CACtB,IAAImE,EAAU,CACZC,MAAO9C,KAAKyB,QAAQ/C,MACpBqE,OAAQ,CAAC,OAAQ,aAGL,IAAIxE,OAAOgC,KAAKyC,OAAOC,cAAcjD,KAAKG,KAEhD+C,mBAAmBL,GAAS,SAAClC,EAASC,GACxCA,IAAWrC,OAAOgC,KAAKyC,OAAOG,oBAAoBC,KACpDnB,EAAK9B,IAAIC,UAAUO,EAAQ,GAAG0C,SAAS3C,UACvCuB,EAAKhC,OAAOC,YAAYS,EAAQ,GAAG0C,SAAS3C,UAEhD,GACF,CACF,GAAC,CAAAlC,IAAA,qBAAAE,MAED,SAAmB4E,EAAMC,EAAO7B,GAAiB,IAAA8B,EAAA,KAC/CxD,KAAK0B,gBAAkBA,EACvB1B,KAAKyB,QAAU6B,EAEf,IAAAG,EACEzD,KAAKe,QAAQC,OADP0C,EAAgBD,EAAhBC,iBAAkBC,EAAgBF,EAAhBE,iBAAkBC,EAAYH,EAAZG,aAAc7B,EAAW0B,EAAX1B,YAGpDD,EAAa+B,SAASC,cAAc,OAC1ChC,EAAWiC,MAAMC,OAAS,QAC1BlC,EAAWiC,MAAM,cAAgB,OACjCjC,EAAWiC,MAAME,MAAQ,OACzBnC,EAAWiC,MAAMG,WAAa,OAE1BN,GACFN,EAAKa,WAAWC,aAAatC,EAAYwB,EAAKe,aAGhDlG,OAAOmG,aAAatE,KAAKuE,kBAAkBC,MAAK,WAC9C,IAAMC,EAAe,IAAIlG,OAAOgC,KAAKyC,OAAO0B,aAC1CpB,EACAE,EAAK1C,qBAGP2D,EAAa/B,YAAY,iBAAiB,WACxC,IAAMiC,EAAQnB,EAAKoB,YAAYH,EAAaI,YAEtCnE,EAAWiE,EAAMtB,SACnB,CACEvD,IAAK6E,EAAMtB,SAAS3C,SAASZ,MAC7BC,IAAK4E,EAAMtB,SAAS3C,SAASX,OAE/B,KAEA6D,GACFJ,EAAK7B,UAAUjB,GAGjBiE,EAAMG,eAAiBC,EAAEtG,IACvBgG,EACA,6CACAE,EAAMnB,EAAKwB,kCAEbtD,EAAgBiD,EAAOrB,EAAMC,EAC/B,IAEIK,GACFJ,EAAKyB,QAAQnD,EAAYC,EAAa,CACpCjC,IAAK4D,EACL3D,IAAK4D,GAGX,GACF,M,yFAsFC,CA9P2B,G,2vDCAvB,IAAMuB,EAA8B,SAAAC,GAAA,SAAAD,IAAA,O,4FAAAzH,CAAA,KAAAyH,GAAAlH,EAAA,KAAAkH,EAAAvH,UAAA,Q,qRAAAO,CAAAgH,EAAS/G,OAAOS,WAAWC,WACnEuG,Q,EADwCF,E,EA0CxC,EAAA1G,IAAA,SAAAE,MAxCD,WAAyB,QAAA2G,EAAA3H,EAAAC,UAAAC,OAAR0H,EAAM,IAAAxH,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANuH,EAAMvH,GAAAJ,UAAAI,GACrB,OAAOsH,EAAAlH,OAAOS,WAAWC,WAAWuG,QAAOG,OAAMxG,MAAAsG,EAAA,CAC/C,CACElG,KAAM,wBACNK,MAAO,0BACPhB,IAAK,wBACLgH,QAAS,MACTC,cAAe,QACfC,SAAU,gCACVC,KAAM,CACJC,IAAK,MAER3H,OACEqH,GAEP,GAAC,CAAA9G,IAAA,cAAAC,IAED,WACE,MAAO,CACLoH,MAAO,0BACPC,MAAO,WACPC,KAAM,aACNC,OAAQ,GACRT,OAAQL,EAA+BK,SAE3C,GAAC,CAAA/G,IAAA,WAAAE,MAiBD,WAA2B,QAAAuH,EAAAC,EAAAvI,UAAAC,OAAR0H,EAAM,IAAAxH,MAAAoI,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANb,EAAMa,GAAAxI,UAAAwI,GACvB,OAAOF,EAAA9H,OAAOS,WAAWC,WAAWuG,QAAOtG,SAAQC,MAAAkH,EAAA,CACjD,CACE,CACEzH,IAAK,OACLK,WAAY,CACV,CACEM,KAAM,YACNG,OAAO,EACPE,MAAO,UACPhB,IAAK,UACLwH,OAAQ,GACRI,YAAa,qBACbC,QAAS,qCAIf,CACE7H,IAAK,UACLK,WAAYyH,gBAAgBxH,WAAWD,WAAWI,MAChD,SAACsH,GAAS,MAAuB,YAAlBA,EAAU/H,GAAiB,IAC1CK,cAELZ,OACEqH,GAEP,K,EAtEyC,EAAA9G,IAAA,YAAAE,MA6BzC,SAAUkH,EAAKY,EAAQC,EAAS1F,EAAS2F,GACvC,IAAMC,EAAO3G,KAAK4G,KAClBhF,QAAQiF,IAAIF,GACZ,IAAM7G,EAAM6G,EAAKG,aAAa,YAAYC,WACpCC,EAAML,EAAKG,aAAa,aAAaC,WAErCE,EAAUjH,KAAKuG,UAAUU,QAM/B,OAJInH,GAAOkH,IACTpB,EAAM,gEAAH3H,OAAmEgJ,EAAO,SAAAhJ,OAAQ6B,EAAG,SAAA7B,OAAQ+I,IAGlGE,EAAAC,EAAAjC,EAAAkC,WAAA,kBAAAC,KAAA,KAAuBzB,EAAKY,EAAQC,EAAS1F,EAAS2F,EACxD,M,yFA4BC,CAtEwC,GCIzC9E,QAAQ0F,KAAK,iCACb/J,EAAkBgK,aAElBpJ,OAAOC,UAAUoJ,YAAY,UAAW,SAAUjK,GAElDY,OAAOS,WAAW6I,aAChB,wBACAvC,E","sources":["webpack://solar-wiki-formio/./src/components/google-map.provider.js","webpack://solar-wiki-formio/./src/components/utility-select.component.js","webpack://solar-wiki-formio/./src/index.js"],"sourcesContent":["export class GoogleMapProvider extends Formio.Providers.providers.address\n  .google {\n  constructor(...props) {\n    super(...props);\n  }\n  static get name() {\n    return \"google\";\n  }\n\n  static get displayName() {\n    return \"Google Maps\";\n  }\n\n  updateMap({ lat, lng }) {\n    this.marker.setPosition({\n      lat,\n      lng,\n    });\n    this.map.setCenter(this.marker.position);\n  }\n\n  reverseGeocode(lat, lng) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode(\n      {\n        location: {\n          lat,\n          lng,\n        },\n      },\n      (results, status) => {\n        const address = results[0];\n\n        if (status === \"OK\" && address) {\n          let isAddressAllowed = true;\n          const autocompleteOptions = this.options.params.autocompleteOptions;\n\n          if (\n            autocompleteOptions.componentRestrictions &&\n            autocompleteOptions.componentRestrictions.country\n          ) {\n            const country = address.address_components.find(\n              (item) => item.types.indexOf(\"country\") !== -1\n            );\n            if (!country) {\n              isAddressAllowed = false;\n            } else if (\n              country.short_name.toLowerCase() !==\n              autocompleteOptions.componentRestrictions.country.toLowerCase()\n            ) {\n              isAddressAllowed = false;\n            }\n          }\n\n          if (!isAddressAllowed) {\n            return;\n          }\n\n          const input = this.element;\n          if (input) {\n            this.onSelectAddress(address, this.element);\n            this.updateMap({\n              lat,\n              lng,\n            });\n          }\n        } else {\n          console.error(\"Geocoder failed due to:\", status);\n        }\n      }\n    );\n  }\n\n  initMap(mapElement, defaultZoom, defaultCenter) {\n    this.map = new google.maps.Map(mapElement, {\n      zoom: defaultZoom,\n      center: this.currentValue || defaultCenter,\n    });\n\n    this.marker = new google.maps.Marker({\n      position: this.currentValue || defaultCenter,\n      map: this.map,\n      draggable: true,\n    });\n\n    if (!this.element.disabled) {\n      google.maps.event.addListener(this.marker, \"dragend\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n\n      google.maps.event.addListener(this.map, \"click\", (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n        this.reverseGeocode(lat, lng);\n      });\n    }\n\n    if (this.element.value) {\n      var request = {\n        query: this.element.value,\n        fields: [\"name\", \"geometry\"],\n      };\n\n      var service = new google.maps.places.PlacesService(this.map);\n\n      service.findPlaceFromQuery(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          this.map.setCenter(results[0].geometry.location);\n          this.marker.setPosition(results[0].geometry.location);\n        }\n      });\n    }\n  }\n\n  attachAutocomplete(elem, index, onSelectAddress) {\n    this.onSelectAddress = onSelectAddress;\n    this.element = elem;\n\n    const { defaultCenterLat, defaultCenterLng, isMapEnabled, defaultZoom } =\n      this.options.params;\n\n    const mapElement = document.createElement(\"div\");\n    mapElement.style.height = \"400px\";\n    mapElement.style[\"margin-top\"] = \"16px\";\n    mapElement.style.width = \"100%\";\n    mapElement.style.background = \"#eee\";\n\n    if (isMapEnabled) {\n      elem.parentNode.insertBefore(mapElement, elem.nextSibling);\n    }\n\n    Formio.libraryReady(this.getLibraryName()).then(() => {\n      const autocomplete = new google.maps.places.Autocomplete(\n        elem,\n        this.autocompleteOptions\n      );\n\n      autocomplete.addListener(\"place_changed\", () => {\n        const place = this.filterPlace(autocomplete.getPlace());\n\n        const location = place.geometry\n          ? {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            }\n          : null;\n\n        if (isMapEnabled) {\n          this.updateMap(location);\n        }\n\n        place.formattedPlace = _.get(\n          autocomplete,\n          \"gm_accessors_.place.se.formattedPrediction\",\n          place[this.alternativeDisplayValueProperty]\n        );\n        onSelectAddress(place, elem, index);\n      });\n\n      if (isMapEnabled) {\n        this.initMap(mapElement, defaultZoom, {\n          lat: defaultCenterLat,\n          lng: defaultCenterLng,\n        });\n      }\n    });\n  }\n  static initialize() {\n    const addressEditForm = Formio.Components.components.address.editForm;\n\n    Formio.Components.components.address.editForm = (...args) => {\n      const editForm = addressEditForm(...args);\n\n      const tabs = editForm.components.find(({ type }) => type === \"tabs\");\n\n      const provider = tabs.components.find(({ key }) => key === \"provider\");\n\n      provider.components.push({\n        type: \"checkbox\",\n        input: true,\n        inputType: \"checkbox\",\n        key: \"providerOptions.params.isMapEnabled\",\n        label: \"Show Map\",\n        defaultValue: false,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultZoom\",\n        label: \"Zoom\",\n        defaultValue: 8,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLat\",\n        label: \"Default Center Latitude\",\n        defaultValue: 40.712776,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      provider.components.push({\n        type: \"number\",\n        input: true,\n        key: \"providerOptions.params.defaultCenterLng\",\n        label: \"Default Center Longitude\",\n        defaultValue: -74.0059728,\n        conditional: {\n          json: {\n            \"===\": [\n              {\n                var: \"data.provider\",\n              },\n              \"google\",\n            ],\n          },\n        },\n      });\n\n      return editForm;\n    };\n  }\n}\n","export class UtilityProviderSelectComponent extends Formio.Components.components\n  .select {\n  static schema(...extend) {\n    return Formio.Components.components.select.schema(\n      {\n        type: \"utilityproviderselect\",\n        label: \"Utility provider select\",\n        key: \"utilityproviderselect\",\n        dataSrc: \"url\",\n        valueProperty: \"value\",\n        template: \"<span>{{ item.label }}</span>\",\n        data: {\n          url: \"\",\n        },\n      },\n      ...extend\n    );\n  }\n\n  static get builderInfo() {\n    return {\n      title: \"Utility provider select\",\n      group: \"advanced\",\n      icon: \"fa fa-list\",\n      weight: 70,\n      schema: UtilityProviderSelectComponent.schema(),\n    };\n  }\n\n  loadItems(url, search, headers, options, method) {\n    const form = this.root;\n    console.log(form);\n    const lat = form.getComponent(\"latitude\").getValue();\n    const lon = form.getComponent(\"longitude\").getValue();\n\n    const api_key = this.component.api_key;\n\n    if (lat && lon) {\n      url = `https://developer.nrel.gov/api/utility_rates/v3.json?api_key=${api_key}&lat=${lat}&lon=${lon}`;\n    }\n\n    return super.loadItems(url, search, headers, options, method);\n  }\n\n  static editForm(...extend) {\n    return Formio.Components.components.select.editForm(\n      [\n        {\n          key: \"data\",\n          components: [\n            {\n              type: \"textfield\",\n              input: true,\n              label: \"API Key\",\n              key: \"api_key\",\n              weight: 20,\n              placeholder: \"Enter your API key\",\n              tooltip: \"The API key for the data source\",\n            },\n          ],\n        },\n        {\n          key: \"display\",\n          components: SelectComponent.editForm().components.find(\n            (component) => component.key === \"display\"\n          ).components,\n        },\n      ],\n      ...extend\n    );\n  }\n}\n","import { GoogleMapProvider } from \"./components/google-map.provider\";\nimport { UtilityProviderSelectComponent } from \"./components/utility-select.component\";\n\n(() => {\n  console.info(\"Custom components was loaded.\");\n  GoogleMapProvider.initialize();\n\n  Formio.Providers.addProvider(\"address\", \"google\", GoogleMapProvider);\n\n  Formio.Components.addComponent(\n    \"utilityproviderselect\",\n    UtilityProviderSelectComponent\n  );\n})();\n"],"names":["GoogleMapProvider","_Formio$Providers$pro","_classCallCheck","_len","arguments","length","props","Array","_key","_callSuper","concat","_inherits","Formio","Providers","providers","address","google","key","get","value","addressEditForm","Components","components","editForm","apply","provider","find","_ref2","type","_ref3","push","input","inputType","label","defaultValue","conditional","json","var","_ref","lat","lng","this","marker","setPosition","map","setCenter","position","_this","maps","Geocoder","geocode","location","results","status","isAddressAllowed","autocompleteOptions","options","params","componentRestrictions","country","address_components","item","types","indexOf","short_name","toLowerCase","element","onSelectAddress","updateMap","console","error","mapElement","defaultZoom","defaultCenter","_this2","Map","zoom","center","currentValue","Marker","draggable","disabled","event","addListener","latLng","reverseGeocode","request","query","fields","places","PlacesService","findPlaceFromQuery","PlacesServiceStatus","OK","geometry","elem","index","_this3","_this$options$params","defaultCenterLat","defaultCenterLng","isMapEnabled","document","createElement","style","height","width","background","parentNode","insertBefore","nextSibling","libraryReady","getLibraryName","then","autocomplete","Autocomplete","place","filterPlace","getPlace","formattedPlace","_","alternativeDisplayValueProperty","initMap","UtilityProviderSelectComponent","_Formio$Components$co","select","_Formio$Components$co2","extend","schema","dataSrc","valueProperty","template","data","url","title","group","icon","weight","_Formio$Components$co3","_len2","_key2","placeholder","tooltip","SelectComponent","component","search","headers","method","form","root","log","getComponent","getValue","lon","api_key","_get","_getPrototypeOf","prototype","call","info","initialize","addProvider","addComponent"],"sourceRoot":""}